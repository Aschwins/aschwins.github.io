<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://aschwins.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aschwins.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-07T16:16:44+00:00</updated><id>https://aschwins.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple blog for my thoughts and projects. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Perfect Python Environment</title><link href="https://aschwins.github.io/blog/2024/perfect-python-environment/" rel="alternate" type="text/html" title="Perfect Python Environment"/><published>2024-10-29T08:25:00+00:00</published><updated>2024-10-29T08:25:00+00:00</updated><id>https://aschwins.github.io/blog/2024/perfect-python-environment</id><content type="html" xml:base="https://aschwins.github.io/blog/2024/perfect-python-environment/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The perfect python environment is a subjective term. It depends on what you are working on. If you are working on data science, you might need jupyter lab. If you are working on web development, you might need Django. If you are working on a machine learning project, you might need PyTorch. But there are some tools that are universally useful. In this post, I will show you how to set up the perfect python environment for any project.</p> <p>We’re going to revolve everything around a <em>python package</em>, because the code that we’re writing should be structured, tested, and documented. Having a python package and living in a virtual environment, will be the best way to make our productivity thrive.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/perfect_python_environment1-480.webp 480w,/assets/img/perfect_python_environment1-800.webp 800w,/assets/img/perfect_python_environment1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/perfect_python_environment1.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Sunch .venv, much wow. </div> <h2 id="pre-requisites">Pre-requisites</h2> <p>Before we get started, you need to have the following installed on your system:</p> <ul> <li>bash</li> <li>curl (<code class="language-plaintext highlighter-rouge">apt install update &amp; apt install curl</code>)</li> <li>git</li> <li>unix based system (macOS, Linux, WSL)</li> </ul> <p>If you are on Windows, use WSL. If you are on macOS, you can use the mac specific commands.</p> <p><br/></p> <h2 id="tldr">TLDR</h2> <ul> <li>UV</li> <li>VSCode</li> <li>Copilot</li> <li>Linting formatting: RUFF</li> <li>jupyter lab / ipython (for data science)</li> <li>git</li> <li>vscode debugger</li> <li>dotenv</li> <li>pytest</li> <li>coverage</li> <li>sphinx</li> <li>pre-commit</li> </ul> <h2 id="step-by-step-with-explanation">Step by Step with explanation</h2> <p><br/></p> <h3 id="1-uv">1. UV</h3> <p>Let starts by creating a directory for the work that we’re going to do. This could be developing a web app, creating a machine learning model or printing “Hello World” to the console. We’re going to call this directory <code class="language-plaintext highlighter-rouge">mypackage</code>. Pun intended.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>mypackage
<span class="nb">cd </span>mypackage
</code></pre></div></div> <p>Now <code class="language-plaintext highlighter-rouge">mypackage</code> is going to be awesome, and of course it’s going to be python. If you’re working with python, you’re going to need a virtual environment, because there a bagilion versions of python available and you want to make sure you’re using the right one. There are almost as many virtual environment handlers as there are versions of python. Historically we had pyenv, conda, virtualenv, poetry and more. But now we have a new kid on the block called <code class="language-plaintext highlighter-rouge">uv</code>.</p> <p><code class="language-plaintext highlighter-rouge">uv</code> is developed by <a href="https://github.com/astral-sh/uv">astral-sh</a>, it’s written in rust and it’s blazing fast. The only risk of using <code class="language-plaintext highlighter-rouge">uv</code> is that the creators will figure out how great it is and they will start to charge us for it. You can install it with the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LsSf</span> https://astral.sh/uv/install.sh | sh

<span class="nb">source</span> <span class="nv">$HOME</span>/.local/bin/env

uv <span class="nt">--version</span>
</code></pre></div></div> <p>Now that we have <code class="language-plaintext highlighter-rouge">uv</code> we can create a virtual environment within our package directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv venv  <span class="c"># creates a virtual environment in the .venv directory</span>
uv init <span class="nt">--name</span> mypackage <span class="nt">--lib</span>  <span class="c"># initializes the package</span>
</code></pre></div></div> <p>This creates a <code class="language-plaintext highlighter-rouge">.venv</code> directory in our package directory. This is where everything about your python environment will reside. <code class="language-plaintext highlighter-rouge">uv</code> will also create a <code class="language-plaintext highlighter-rouge">pyproject.toml</code>, a <code class="language-plaintext highlighter-rouge">README.md</code>, a <code class="language-plaintext highlighter-rouge">.git</code> directory, a <code class="language-plaintext highlighter-rouge">.python-version</code> and a <code class="language-plaintext highlighter-rouge">src</code> directory.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/perfect_python_environment2-480.webp 480w,/assets/img/perfect_python_environment2-800.webp 800w,/assets/img/perfect_python_environment2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/perfect_python_environment2.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Starting off with uv </div> <p>Let’s activate the virtual environment.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> .venv/bin/activate
</code></pre></div></div> <p>Now you’re in the virtual environment. You can tell by the <code class="language-plaintext highlighter-rouge">(mypackage)</code> in front of your prompt. Let’s install our package.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv <span class="nb">sync</span>
</code></pre></div></div> <p>We can check that our package is installed by running the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python
<span class="o">&gt;&gt;&gt;</span> import mypackage
</code></pre></div></div> <h3 id="2-vscode">2. VSCode</h3>]]></content><author><name></name></author><category term="programming"/><category term="python"/><category term="data-science"/><summary type="html"><![CDATA[making your python thrive]]></summary></entry><entry><title type="html">Terminal Drip</title><link href="https://aschwins.github.io/blog/2024/terminal-drip/" rel="alternate" type="text/html" title="Terminal Drip"/><published>2024-10-14T09:25:00+00:00</published><updated>2024-10-14T09:25:00+00:00</updated><id>https://aschwins.github.io/blog/2024/terminal-drip</id><content type="html" xml:base="https://aschwins.github.io/blog/2024/terminal-drip/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>I get asked this question a lot at the office: “How do you get your terminal to look like that?”. The goal of this blogpost is to answer that question. I will show you how to make your terminal drip with drip.</p> <p>If you hear yourself say a simple terminal with bash is all I need. I don’t need fancy themes or custom fonts or animated backgrounds. I just need it to work. Then you don’t appreciate the art of productivity. You also don’t see the value in making tools pleasure you.</p> <p>If you want to hop on the drip train, please continue to read and implement the following steps.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/terminal-no-drip-480.webp 480w,/assets/img/terminal-no-drip-800.webp 800w,/assets/img/terminal-no-drip-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/terminal-no-drip.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A terminal with absolutely no drip. It almost hurts to look at. </div> <h2 id="pre-requisites">Pre-requisites</h2> <p>Before we get started, you need to have the following installed on your system:</p> <ul> <li>bash</li> <li>git</li> </ul> <p>If you are on Windows, use WSL. If you are on macOS, you can use the mac specific commands.</p> <p><br/></p> <h2 id="tldr">TLDR</h2> <p>Run the following commands in your terminal. If you’re on MacOs please scroll down to the collapsed section.</p> <ul id="os" class="tab" data-tab="9a28397b-8a26-43fb-9406-3a5845810826" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="9a28397b-8a26-43fb-9406-3a5845810826" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>zsh

<span class="c"># install oh-my-zsh</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>

<span class="c"># change your default shell to zsh</span>
chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>

<span class="c"># restart your terminal</span>
zsh

<span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search

<span class="c"># install bat</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>bat

<span class="c"># replace plugins line in .zshrc file to contain the correct plugins</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/plugins=(git)/c\plugins=(git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search)'</span> ~/.zshrc

<span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh</span>
brew <span class="nb">install </span>zsh

<span class="c"># install oh-my-zsh</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>

<span class="c"># change your default shell to zsh</span>
chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>

<span class="c"># restart your terminal</span>
zsh

<span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search

<span class="c"># install bat</span>
brew <span class="nb">install </span>bat

<span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc

<span class="c"># replace plugins line in .zshrc file to contain the correct plugins</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'/plugins=(git)/c\
plugins=(git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search)'</span> ~/.zshrc
</code></pre></div></div> </li> </ul> <p><br/></p> <h2 id="step-by-step-with-explanation">Step by Step with explanation</h2> <p><br/></p> <h3 id="1-install-zsh">1. Install ZSH</h3> <p>Bash on steroids.</p> <p><a href="https://zsh.sourceforge.io/">Zsh</a> or Z shell is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added. The result is a powerful shell with advanced scripting capabilities.</p> <p>To install Zsh on Ubuntu, run the following command:</p> <ul id="os" class="tab" data-tab="97b6268c-0eda-40a3-bfda-4c364781731c" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="97b6268c-0eda-40a3-bfda-4c364781731c" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>zsh
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>zsh
</code></pre></div></div> </li> </ul> <p>Now we always want to use zsh over bash, so we set the default shell to zsh.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="2-install-oh-my-zsh">2. Install Oh-My-Zsh</h3> <p>The package manager of Zsh.</p> <p><a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh</a> is an open-source, community-driven framework for managing your Zsh configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <p><br/></p> <h3 id="3-install-zsh-plugins">3. Install ZSH plugins</h3> <p>The drip.</p> <p>There are many great plugins for Zsh. Here are a few that I use:</p> <ul> <li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> - Fish shell-like syntax highlighting for Zsh. This makes it easier to spot errors in your commands.</li> <li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a> - Fish-like autosuggestions for Zsh. This suggests commands as you type based on your command history. Use tab to accept the suggestion.</li> <li><a href="https://github.com/zsh-users/zsh-history-substring-search">zsh-history-substring-search</a> - This plugin adds a feature where you can search your history by typing a substring of the command you are looking for and pressing the up and down arrow keys to cycle through the results.</li> </ul> <p>Since we are using Oh-My-Zsh, we can install these plugins by cloning them into the <code class="language-plaintext highlighter-rouge">~/.oh-my-zsh/custom/plugins</code> directory and adding them to the plugins list in the <code class="language-plaintext highlighter-rouge">.zshrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search
</code></pre></div></div> <p><br/></p> <h3 id="4-install-bat">4. Install bat</h3> <p>A cat clone with wings.</p> <ul id="os" class="tab" data-tab="adf6d20f-e38d-40eb-89ae-07118ad4bf5d" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="adf6d20f-e38d-40eb-89ae-07118ad4bf5d" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>bat
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>bat
</code></pre></div></div> </li> </ul> <p>Just like Batman has a utility belt, you can have a utility command. Replace the <code class="language-plaintext highlighter-rouge">cat</code> command with <code class="language-plaintext highlighter-rouge">bat</code> by adding the following alias to your <code class="language-plaintext highlighter-rouge">.zsh_aliases</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> <p><br/></p> <h3 id="5-change-your-zshrc-file">5. Change your .zshrc file</h3> <p>Customize your Zsh configuration.</p> <p>Open your <code class="language-plaintext highlighter-rouge">.zshrc</code> file in your favorite text (e.g. <code class="language-plaintext highlighter-rouge">vim ~/.zshrc</code>) editor and replace the plugins line with the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search<span class="o">)</span>
</code></pre></div></div> <p>Don’t forget to <code class="language-plaintext highlighter-rouge">source ~/.zshrc</code> to apply the changes, or restart your terminal.</p> <p><br/></p> <h3 id="the-cherry-on-top">The cherry on top</h3> <p>It’s over 9000!</p> <p>If you’re a minimalistic person, you can stop here. But if you want to take it to the next level, you can install a custom theme for Oh-My-Zsh. I recommend <a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/terminal-yes-drip-480.webp 480w,/assets/img/terminal-yes-drip-800.webp 800w,/assets/img/terminal-yes-drip-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/terminal-yes-drip.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A terminal dripping with drip. I can stare at this all day. </div>]]></content><author><name></name></author><category term="programming"/><category term="bash"/><category term="unix"/><summary type="html"><![CDATA[a question I get asked a lot at the office]]></summary></entry><entry><title type="html">Bayesian Optimization From Scratch</title><link href="https://aschwins.github.io/blog/2023/bo-from-scratch/" rel="alternate" type="text/html" title="Bayesian Optimization From Scratch"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://aschwins.github.io/blog/2023/bo-from-scratch</id><content type="html" xml:base="https://aschwins.github.io/blog/2023/bo-from-scratch/"><![CDATA[<div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/bo1-BOFromScratch.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="data-science"/><category term="programming"/><summary type="html"><![CDATA[opening the black box of bayesian optimization]]></summary></entry></feed>