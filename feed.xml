<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://aschwins.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://aschwins.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-03-25T12:11:16+00:00</updated><id>https://aschwins.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple blog for my thoughts and projects. Based on [*folio](https://github.com/bogoli/-folio) design. </subtitle><entry><title type="html">Perfect Python Environment</title><link href="https://aschwins.github.io/blog/2024/perfect-python-environment/" rel="alternate" type="text/html" title="Perfect Python Environment"/><published>2024-10-29T08:25:00+00:00</published><updated>2024-10-29T08:25:00+00:00</updated><id>https://aschwins.github.io/blog/2024/perfect-python-environment</id><content type="html" xml:base="https://aschwins.github.io/blog/2024/perfect-python-environment/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>The perfect python environment is a subjective term. It depends on what you are working on. If you are working on data science, you might need jupyter lab. If you are working on web development, you might need Django. If you are working on a machine learning project, you might need PyTorch. But there are some tools that are universally useful. In this post, I will show you how to set up the perfect python environment for any project.</p> <p>We’re going to revolve everything around a <em>python package</em>, because the code that we’re writing should be structured, tested, and documented. Having a python package and living in a virtual environment, will be the best way to make our productivity thrive.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/perfect_python_environment1-480.webp 480w,/assets/img/perfect_python_environment1-800.webp 800w,/assets/img/perfect_python_environment1-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/perfect_python_environment1.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Sunch .venv, much wow. </div> <h2 id="pre-requisites">Pre-requisites</h2> <p>Before we get started, you need to have the following installed on your system:</p> <ul> <li>bash</li> <li>curl (<code class="language-plaintext highlighter-rouge">apt install update &amp; apt install curl</code>)</li> <li>git</li> <li>unix based system (macOS, Linux, WSL)</li> </ul> <p>If you are on Windows, use WSL. If you are on macOS, you can use the mac specific commands.</p> <p><br/></p> <h2 id="tldr">TLDR</h2> <ul> <li>UV</li> <li>VS Code</li> <li>Copilot</li> <li>Linting formatting: RUFF</li> <li>jupyter lab / ipython (for data science)</li> <li>marimo</li> <li>git</li> <li>VS Code debugger</li> <li>dotenv</li> <li>pytest</li> <li>coverage</li> <li>sphinx</li> <li>pre-commit</li> </ul> <h2 id="step-by-step-with-explanation">Step by Step with explanation</h2> <p><br/></p> <h3 id="1-uv">1. UV</h3> <p>Let starts by creating a directory for the work that we’re going to do. This could be developing a web app, creating a machine learning model or printing “Hello World” to the console. We’re going to call this directory <code class="language-plaintext highlighter-rouge">mypackage</code>. Pun intended.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>mypackage
<span class="nb">cd </span>mypackage
</code></pre></div></div> <p>Now <code class="language-plaintext highlighter-rouge">mypackage</code> is going to be awesome, and of course it’s going to be python. If you’re working with python, you’re going to need a virtual environment, because there a bagilion versions of python available and you want to make sure you’re using the right one. There are almost as many virtual environment handlers as there are versions of python. Historically we had pyenv, conda, virtualenv, poetry and more. But now we have a new kid on the block called <code class="language-plaintext highlighter-rouge">uv</code>.</p> <p><code class="language-plaintext highlighter-rouge">uv</code> is developed by <a href="https://github.com/astral-sh/uv">astral-sh</a>, it’s written in rust and it’s blazing fast. The only risk of using <code class="language-plaintext highlighter-rouge">uv</code> is that the creators will figure out how great it is and they will start to charge us for it. You can install it with the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl <span class="nt">-LsSf</span> https://astral.sh/uv/install.sh | sh

<span class="nb">source</span> <span class="nv">$HOME</span>/.local/bin/env

uv <span class="nt">--version</span>
</code></pre></div></div> <p>Now that we have <code class="language-plaintext highlighter-rouge">uv</code> we can create a virtual environment within our package directory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv venv  <span class="c"># creates a virtual environment in the .venv directory</span>
uv init <span class="nt">--name</span> mypackage <span class="nt">--lib</span>  <span class="c"># initializes the package</span>
</code></pre></div></div> <p>This creates a <code class="language-plaintext highlighter-rouge">.venv</code> directory in our package directory. This is where everything about your python environment will reside. <code class="language-plaintext highlighter-rouge">uv</code> will also create a <code class="language-plaintext highlighter-rouge">pyproject.toml</code>, a <code class="language-plaintext highlighter-rouge">README.md</code>, a <code class="language-plaintext highlighter-rouge">.git</code> directory, a <code class="language-plaintext highlighter-rouge">.python-version</code> and a <code class="language-plaintext highlighter-rouge">src</code> directory.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/perfect_python_environment2-480.webp 480w,/assets/img/perfect_python_environment2-800.webp 800w,/assets/img/perfect_python_environment2-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/perfect_python_environment2.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Starting off with uv </div> <p>Let’s activate the virtual environment.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">source</span> .venv/bin/activate
</code></pre></div></div> <p>Now you’re in the virtual environment. You can tell by the <code class="language-plaintext highlighter-rouge">(mypackage)</code> in front of your prompt. Let’s install our package.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv <span class="nb">sync</span>
</code></pre></div></div> <p>We can check that our package is installed by running the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python
<span class="o">&gt;&gt;&gt;</span> import mypackage
</code></pre></div></div> <p>We can import our package, but it doesn’t have anything installed yet. Let create a module called <code class="language-plaintext highlighter-rouge">mymodule</code> and add a function called <code class="language-plaintext highlighter-rouge">my_awesome_function</code> that prints “Hello World!”.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">touch </span>src/mypackage/mymodule.py

<span class="nb">echo</span> <span class="s2">"def my_awesome_function():
    print('Hello World!')"</span> <span class="o">&gt;</span> src/mypackage/mymodule.py
</code></pre></div></div> <p>Now mypackage has a module called <code class="language-plaintext highlighter-rouge">mymodule</code> with a function called <code class="language-plaintext highlighter-rouge">my_awesome_function</code>.</p> <h3 id="2-vs-code">2. VS Code</h3> <p>Now that we have our package set up, we need an editor to write our code in. I recommend Visual Studio Code. You can install it by going to the <a href="https://code.visualstudio.com/download">download page</a> and following the instructions.</p> <p>Once install we can run VS Code from the terminal by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">exec</span> <span class="nv">$SHELL</span> <span class="nt">-l</span>  <span class="c"># restarts the shell</span>
code <span class="nb">.</span>
</code></pre></div></div> <p>This will open VS Code in the current directory. Which is still our mypackage directory (hopefully).</p> <p>This tutorial is not about how to use VS Code, but I will show you some extensions that I recommend you install.</p> <ul> <li>Python</li> <li>Git History / GitLens / Git Graph (pick your favorite)</li> <li>Remote - SSH</li> <li>VS Code-icons</li> <li>WSL (if you’re on WSL)</li> <li>Data Wrangler</li> <li>Docker</li> <li>Prettier</li> <li>Rainbow CSV</li> <li>Window Colors</li> <li>SQLite Viewer</li> <li>Github Copilot</li> </ul> <p>There is pretty much an extension for everything you want. If there isn’t, you can always write your own.</p> <h3 id="3-copilot">3. Copilot</h3> <p>If you value your time, you should pay a measily $10 per month to save hours of debugging, suggesting code, writing docstrings, writing tests, and more. Copilot is a plugin for VS Code that uses OpenAI’s GPT-4o to help you write code. It’s like having a pair programmer that never sleeps, never eats, and never complains. You can install it by going to the <a href="https://copilot.github.com">copilot page</a> and following the instructions.</p> <p>Install it within you VS Code to maximize productivity!</p> <h3 id="4-linting-and-formatting">4. Linting and Formatting</h3> <p>Linting and formatting are important. It makes your code more readable and it helps you catch bugs before they become a problem. I recommend using <a href="https://docs.astral.sh/ruff/">ruff</a>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0" style="max-width: 300px; display:block; margin-left:auto; margin-right:auto"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/ruff-480.webp 480w,/assets/img/ruff-800.webp 800w,/assets/img/ruff-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/ruff.jpg" class="img-fluid rounded" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A different kind of ruff. </div> <p>Ruff comes preinstalled with <code class="language-plaintext highlighter-rouge">uv</code>. You can run it by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uvx ruff check <span class="nb">.</span> <span class="nt">--fix</span>
uvx ruff format <span class="nb">.</span>
</code></pre></div></div> <h3 id="5-jupyter-lab--ipython">5. Jupyter Lab &amp; ipython</h3> <p>Notebooks are great for data science, but they have the tendency to get a bit cluttered. Also tracking them in source control can be a bit of a pain. The good part about mypackage is that you can import it in Jupyter Notebooks and use it as you would any other package. You can install Jupyter Lab by running the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># make sure you're in the virtual environment (.venv)</span>
uv pip <span class="nb">install </span>jupyterlab

<span class="nb">mkdir </span>notebooks

<span class="c"># start jupyter lab</span>
jupyter lab
</code></pre></div></div> <p>It’s good practice to keep your notebooks in a separate directory (<code class="language-plaintext highlighter-rouge">notebooks</code>) from your package. Another good practice is to keep your notebooks clean and to move classes and functions to a python module in your package. This way you can test your code and make sure it’s working as expected. You can also use Copilot to help you write code, because that’s not available in JupyterLab (yet). You can also run Jupyter Notebooks in VS Code.</p> <p>Try running the following in a notebook:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">%</span><span class="n">load_ext</span> <span class="n">autoreload</span>
<span class="o">%</span><span class="n">autoreload</span> <span class="mi">2</span>

<span class="kn">from</span> <span class="n">mypackage.mymodule</span> <span class="kn">import</span> <span class="n">my_awesome_function</span>
<span class="nf">my_awesome_function</span><span class="p">()</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/jupyterlab-mypackage-480.webp 480w,/assets/img/jupyterlab-mypackage-800.webp 800w,/assets/img/jupyterlab-mypackage-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/jupyterlab-mypackage.png" class="img-fluid rounded" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Importing mypackage in Jupyter Lab </div> <h3 id="6-marimo">6. Marimo</h3> <p>Marimo is an open-source reactive notebook. It’s the next generation of python notebooks. You can check it out <a href="https://marimo.io/">here</a>. What I love about marimo is that it’s reactive. You can write code in one cell and use the output in another cell. It’s like having a spreadsheet, but with python code.</p> <p>You can also configure UI elements to interact with your code. You can create sliders, buttons, and text fields to change the input of your code. You can create a GUI for your code, which is great for exploratory data analysis (EDA) and for creating a simple dashboard.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/video/marimo-480.webp 480w,/assets/video/marimo-800.webp 800w,/assets/video/marimo-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/video/marimo.gif" class="img-fluid rounded" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h3 id="7-git">7. Git</h3> <p>You should be using git. Period.</p> <h3 id="8-vs-code-debugger">8. VS Code Debugger</h3> <p>Now this is very usefull when developing python modules. If you have a script that you want to debug, you can use the VS Code debugger. You can set breakpoints, step through your code, and inspect variables. You can also use the debugger in Jupyter Notebooks.</p> <p>Set breakpoints in your scripts, so you are able to see the exact status of all your variables at that point in your code. You can then use the DEBUG CONSOLE to run parts of your code to find the error.</p> <h3 id="9-dotenv">9. Dotenv</h3> <p>Within your python development environment there are certain things you want to keep secret. Like API keys, passwords, and other sensitive information. You can use a <code class="language-plaintext highlighter-rouge">.env</code> file to store these secrets. You can use the <code class="language-plaintext highlighter-rouge">python-dotenv</code> package to load these secrets into your environment variables. You can install it by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>python-dotenv
</code></pre></div></div> <p>You can create a <code class="language-plaintext highlighter-rouge">.env</code> file in the root of your package directory and add your secrets to it.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SECRET_KEY=youllneverguess
</code></pre></div></div> <p>You can load these secrets into your environment variables by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from dotenv import load_dotenv
load_dotenv<span class="o">()</span>

import os
print<span class="o">(</span>os.getenv<span class="o">(</span><span class="s1">'SECRET_KEY'</span><span class="o">))</span>
</code></pre></div></div> <h3 id="10-pytest">10. Pytest</h3> <p>Code without tests is like a car without brakes. You can drive it, but you’re going to crash. You can write tests for your code using the <code class="language-plaintext highlighter-rouge">pytest</code> package. You can install it by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>pytest
</code></pre></div></div> <p>You can write tests for your code by creating a <code class="language-plaintext highlighter-rouge">tests</code> directory in the root of your package directory. You can create a test file called <code class="language-plaintext highlighter-rouge">test_mymodule.py</code> and write tests for your code. You can run the tests by running the following command:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">test_my_awesome_function</span><span class="p">():</span>
    <span class="k">assert</span> <span class="nf">my_awesome_function</span><span class="p">()</span> <span class="o">==</span> <span class="sh">'</span><span class="s">Hello World!</span><span class="sh">'</span>
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pytest
</code></pre></div></div> <h3 id="11-pyright">11. Pyright</h3> <p>Pyright is a fast type checker for Python, developed by Microsoft.</p> <ul> <li>Static type checker → Catches type errors without running code.</li> <li>Works with Type Hints → Uses Python’s <code class="language-plaintext highlighter-rouge">typing</code> module.</li> <li>Faster than mypy → Built for speed and scalability.</li> <li>VS Code support → Integrated with Pylance for real-time feedback.</li> <li>CLI &amp; Editor → Runs in terminal or as an extension.</li> <li>Strict mode available → Enforces stronger type checking.</li> <li>Use it to catch bugs early, improve code quality, and enforce type safety.</li> </ul> <p>Install it with</p> <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>pyright
</code></pre></div></div> <p>Run it with</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pyright</span>
</code></pre></div></div> <h3 id="12-coverage">12. Coverage</h3> <p>The <code class="language-plaintext highlighter-rouge">coverage</code> Python package is a tool used to measure how much of your Python code is executed during testing. It helps identify untested parts of your codebase, ensuring better test coverage and improving software quality.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>coverage
</code></pre></div></div> <p>You can run the coverage report by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>coverage run <span class="nt">-m</span> pytest
coverage report
</code></pre></div></div> <p>Using <code class="language-plaintext highlighter-rouge">coverage</code> regularly helps catch hidden bugs and ensures that your tests fully validate your code. It’s like a spellchecker for your testing—highlighting what you’ve missed and helping you write more reliable software.</p> <h3 id="13-sphinx">13. Sphinx</h3> <p>Sphinx is a Python documentation generator that allows developers to create well-structured, professional-looking documentation for their projects. It was originally developed for documenting Python itself but is now widely used across many open-source and commercial projects.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>sphinx
</code></pre></div></div> <p>You can generate the documentation by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sphinx-quickstart
</code></pre></div></div> <p>You can configure the documentation by answering the questions that are asked. You can generate the documentation by running the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sphinx-build <span class="nt">-b</span> html docs docs/_build
</code></pre></div></div> <p>You can view the documentation by opening the <code class="language-plaintext highlighter-rouge">docs/_build/index.html</code> file in your browser.</p> <h3 id="14-pre-commit">14. Pre-commit</h3> <p>The <code class="language-plaintext highlighter-rouge">pre-commit</code> Python package is a framework for managing and running git pre-commit hooks. It allows developers to automate checks and fixes before committing code, ensuring better code quality and consistency across a team.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>pre-commit
</code></pre></div></div> <p>You can configure the checks by creating a <code class="language-plaintext highlighter-rouge">.pre-commit-config.yaml</code> file in the root of your package directory. A good starting point is to use the <code class="language-plaintext highlighter-rouge">pre-commit-hooks</code> package, which provides a set of common hooks for linting and formatting code. Of course there are many more hooks available for different use cases. Some good hooks to check out would be <code class="language-plaintext highlighter-rouge">ruff</code>, <code class="language-plaintext highlighter-rouge">pyright</code>, <code class="language-plaintext highlighter-rouge">isort</code>, <code class="language-plaintext highlighter-rouge">prettier</code>.</p> <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">repos</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">repo</span><span class="pi">:</span> <span class="s">https://github.com/pre-commit/pre-commit-hooks</span>
    <span class="na">rev</span><span class="pi">:</span> <span class="s">v4.4.0</span> <span class="c1"># Use the latest stable version</span>
    <span class="na">hooks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">trailing-whitespace</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">end-of-file-fixer</span>
      <span class="pi">-</span> <span class="na">id</span><span class="pi">:</span> <span class="s">check-yaml</span>
</code></pre></div></div> <p>Install the hooks</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pre-commit <span class="nb">install</span>
</code></pre></div></div> <p>Run the hooks</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pre-commit run <span class="nt">--all-files</span>
</code></pre></div></div> <p>The hooks will also automatically run before each commit, ensuring that your code meets the defined standards.</p> <h3 id="conclusion">Conclusion</h3> <p>This is the perfect python environment. It’s a bit of work to set up, but it’s worth it. You can use this environment for any project that you’re working on. It will make your code more structured, more tested, and more documented. It will make your productivity thrive. And that’s what we all want, right?</p>]]></content><author><name></name></author><category term="programming"/><category term="python"/><category term="data-science"/><summary type="html"><![CDATA[making your python thrive]]></summary></entry><entry><title type="html">Terminal Drip</title><link href="https://aschwins.github.io/blog/2024/terminal-drip/" rel="alternate" type="text/html" title="Terminal Drip"/><published>2024-10-14T09:25:00+00:00</published><updated>2024-10-14T09:25:00+00:00</updated><id>https://aschwins.github.io/blog/2024/terminal-drip</id><content type="html" xml:base="https://aschwins.github.io/blog/2024/terminal-drip/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>I get asked this question a lot at the office: “How do you get your terminal to look like that?”. The goal of this blogpost is to answer that question. I will show you how to make your terminal drip with drip.</p> <p>If you hear yourself say a simple terminal with bash is all I need. I don’t need fancy themes or custom fonts or animated backgrounds. I just need it to work. Then you don’t appreciate the art of productivity. You also don’t see the value in making tools pleasure you.</p> <p>If you want to hop on the drip train, please continue to read and implement the following steps.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/terminal-no-drip-480.webp 480w,/assets/img/terminal-no-drip-800.webp 800w,/assets/img/terminal-no-drip-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/terminal-no-drip.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A terminal with absolutely no drip. It almost hurts to look at. </div> <h2 id="pre-requisites">Pre-requisites</h2> <p>Before we get started, you need to have the following installed on your system:</p> <ul> <li>bash</li> <li>git</li> </ul> <p>If you are on Windows, use WSL. If you are on macOS, you can use the mac specific commands.</p> <p><br/></p> <h2 id="tldr">TLDR</h2> <p>Run the following commands in your terminal. If you’re on MacOs please scroll down to the collapsed section.</p> <ul id="os" class="tab" data-tab="89f2b171-0ae0-4288-90ca-add86f5d9852" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="89f2b171-0ae0-4288-90ca-add86f5d9852" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>zsh

<span class="c"># install oh-my-zsh</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>

<span class="c"># change your default shell to zsh</span>
chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>

<span class="c"># restart your terminal</span>
zsh

<span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search

<span class="c"># install bat</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>bat

<span class="c"># replace plugins line in .zshrc file to contain the correct plugins</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">'/plugins=(git)/c\plugins=(git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search)'</span> ~/.zshrc

<span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh</span>
brew <span class="nb">install </span>zsh

<span class="c"># install oh-my-zsh</span>
sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>

<span class="c"># change your default shell to zsh</span>
chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>

<span class="c"># restart your terminal</span>
zsh

<span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search

<span class="c"># install bat</span>
brew <span class="nb">install </span>bat

<span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc

<span class="c"># replace plugins line in .zshrc file to contain the correct plugins</span>
<span class="nb">sed</span> <span class="nt">-i</span> <span class="s1">''</span> <span class="s1">'/plugins=(git)/c\
plugins=(git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search)'</span> ~/.zshrc
</code></pre></div></div> </li> </ul> <p><br/></p> <h2 id="step-by-step-with-explanation">Step by Step with explanation</h2> <p><br/></p> <h3 id="1-install-zsh">1. Install ZSH</h3> <p>Bash on steroids.</p> <p><a href="https://zsh.sourceforge.io/">Zsh</a> or Z shell is a shell designed for interactive use, although it is also a powerful scripting language. Many of the useful features of bash, ksh, and tcsh were incorporated into zsh; many original features were added. The result is a powerful shell with advanced scripting capabilities.</p> <p>To install Zsh on Ubuntu, run the following command:</p> <ul id="os" class="tab" data-tab="26f25956-a8f5-4229-a131-234d2a0e5044" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="26f25956-a8f5-4229-a131-234d2a0e5044" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>zsh
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>zsh
</code></pre></div></div> </li> </ul> <p>Now we always want to use zsh over bash, so we set the default shell to zsh.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh <span class="nt">-s</span> <span class="si">$(</span>which zsh<span class="si">)</span>
</code></pre></div></div> <p><br/></p> <h3 id="2-install-oh-my-zsh">2. Install Oh-My-Zsh</h3> <p>The package manager of Zsh.</p> <p><a href="https://github.com/ohmyzsh/ohmyzsh">Oh My Zsh</a> is an open-source, community-driven framework for managing your Zsh configuration. It comes bundled with a ton of helpful functions, helpers, plugins, themes, and a few things that make you shout…</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <p><br/></p> <h3 id="3-install-zsh-plugins">3. Install ZSH plugins</h3> <p>The drip.</p> <p>There are many great plugins for Zsh. Here are a few that I use:</p> <ul> <li><a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a> - Fish shell-like syntax highlighting for Zsh. This makes it easier to spot errors in your commands.</li> <li><a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a> - Fish-like autosuggestions for Zsh. This suggests commands as you type based on your command history. Use tab to accept the suggestion.</li> <li><a href="https://github.com/zsh-users/zsh-history-substring-search">zsh-history-substring-search</a> - This plugin adds a feature where you can search your history by typing a substring of the command you are looking for and pressing the up and down arrow keys to cycle through the results.</li> </ul> <p>Since we are using Oh-My-Zsh, we can install these plugins by cloning them into the <code class="language-plaintext highlighter-rouge">~/.oh-my-zsh/custom/plugins</code> directory and adding them to the plugins list in the <code class="language-plaintext highlighter-rouge">.zshrc</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># install zsh-syntax-highlighting</span>
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting

<span class="c"># install zsh-autosuggestions</span>
git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions

<span class="c"># install zsh-history-substring-search</span>
git clone https://github.com/zsh-users/zsh-history-substring-search <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-history-substring-search
</code></pre></div></div> <p><br/></p> <h3 id="4-install-bat">4. Install bat</h3> <p>A cat clone with wings.</p> <ul id="os" class="tab" data-tab="14134370-de8a-4d44-9f90-086b7813934c" data-name="os"> <li class="active" id="os-linux"> <a href="#">linux </a> </li> <li id="os-macos"> <a href="#">MacOS </a> </li> </ul> <ul class="tab-content" id="14134370-de8a-4d44-9f90-086b7813934c" data-name="os"> <li class="active"> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>bat
</code></pre></div></div> </li> <li> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>bat
</code></pre></div></div> </li> </ul> <p>Just like Batman has a utility belt, you can have a utility command. Replace the <code class="language-plaintext highlighter-rouge">cat</code> command with <code class="language-plaintext highlighter-rouge">bat</code> by adding the following alias to your <code class="language-plaintext highlighter-rouge">.zsh_aliases</code> file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># create a file to store your aliases</span>
<span class="nb">touch</span> ~/.zsh_aliases

<span class="c"># alias cat to bat</span>
<span class="nb">echo</span> <span class="s2">"alias cat='bat'"</span> <span class="o">&gt;&gt;</span> ~/.zsh_aliases

<span class="c"># source the aliases file in your .zshrc</span>
<span class="nb">echo</span> <span class="s2">"source ~/.zsh_aliases"</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div> <p><br/></p> <h3 id="5-change-your-zshrc-file">5. Change your .zshrc file</h3> <p>Customize your Zsh configuration.</p> <p>Open your <code class="language-plaintext highlighter-rouge">.zshrc</code> file in your favorite text (e.g. <code class="language-plaintext highlighter-rouge">vim ~/.zshrc</code>) editor and replace the plugins line with the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">plugins</span><span class="o">=(</span>git docker zsh-syntax-highlighting zsh-autosuggestions zsh-history-substring-search<span class="o">)</span>
</code></pre></div></div> <p>Don’t forget to <code class="language-plaintext highlighter-rouge">source ~/.zshrc</code> to apply the changes, or restart your terminal.</p> <p><br/></p> <h3 id="the-cherry-on-top">The cherry on top</h3> <p>It’s over 9000!</p> <p>If you’re a minimalistic person, you can stop here. But if you want to take it to the next level, you can install a custom theme for Oh-My-Zsh. I recommend <a href="https://github.com/romkatv/powerlevel10k">Powerlevel10k</a>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/terminal-yes-drip-480.webp 480w,/assets/img/terminal-yes-drip-800.webp 800w,/assets/img/terminal-yes-drip-1400.webp 1400w," type="image/webp" sizes="95vw"/> <img src="/assets/img/terminal-yes-drip.png" class="img-fluid" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> A terminal dripping with drip. I can stare at this all day. </div>]]></content><author><name></name></author><category term="programming"/><category term="bash"/><category term="unix"/><summary type="html"><![CDATA[a question I get asked a lot at the office]]></summary></entry><entry><title type="html">Bayesian Optimization From Scratch</title><link href="https://aschwins.github.io/blog/2023/bo-from-scratch/" rel="alternate" type="text/html" title="Bayesian Optimization From Scratch"/><published>2023-07-04T12:57:00+00:00</published><updated>2023-07-04T12:57:00+00:00</updated><id>https://aschwins.github.io/blog/2023/bo-from-scratch</id><content type="html" xml:base="https://aschwins.github.io/blog/2023/bo-from-scratch/"><![CDATA[<div class="jupyter-notebook" style="position: relative; width: 100%; margin: 0 auto;"> <div class="jupyter-notebook-iframe-container"> <iframe src="/assets/jupyter/bo1-BOFromScratch.ipynb.html" style="position: absolute; top: 0; left: 0; border-style: none;" width="100%" height="100%" onload="this.parentElement.style.paddingBottom = (this.contentWindow.document.documentElement.scrollHeight + 10) + 'px'"></iframe> </div> </div>]]></content><author><name></name></author><category term="sample-posts"/><category term="data-science"/><category term="programming"/><summary type="html"><![CDATA[opening the black box of bayesian optimization]]></summary></entry></feed>